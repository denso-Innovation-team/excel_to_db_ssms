#!/usr/bin/env python3
"""
SQL Server Test Runner for Excel Import
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ SQL Server
"""

import sys
import os
from pathlib import Path
import pandas as pd
from datetime import datetime

# Add src to path
sys.path.insert(0, str(Path(__file__).parent))

def test_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server"""
    try:
        from src.config.database import db_manager
        
        print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server...")
        
        if db_manager.test_connection():
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server ‡πÑ‡∏î‡πâ")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def quick_test():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    
    print("üöÄ Quick Test: Excel ‚Üí SQL Server")
    print("=" * 40)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
    if not test_connection():
        print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("  1. SQL Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("  2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô .env ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("  3. pip install pyodbc pymssql")
        return False
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_data = {
        'Name': ['John Doe', 'Jane Smith', 'Bob Wilson', 'Alice Brown'],
        'Age': [25, 30, 35, 28], 
        'Email': ['john@test.com', 'jane@test.com', 'bob@test.com', 'alice@test.com'],
        'Salary': [50000.0, 75000.0, 85000.0, 60000.0],
        'Active': [True, True, False, True],
        'JoinDate': ['2023-01-15', '2023-02-20', '2023-03-10', '2023-04-05']
    }
    
    df = pd.DataFrame(test_data)
    test_file = 'quick_test.xlsx'
    df.to_excel(test_file, index=False)
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_file}")
    
    # Import to SQL Server
    try:
        from src.processors.excel_reader import ExcelReader
        from src.processors.data_validator import DataValidator
        from src.processors.database_writer import DatabaseWriter
        
        # Type mapping
        type_mapping = {
            "name": "string",
            "age": "integer", 
            "email": "string",
            "salary": "float",
            "active": "boolean",
            "joindate": "datetime"
        }
        
        # Process
        reader = ExcelReader(test_file)
        validator = DataValidator()
        writer = DatabaseWriter("quick_test")
        
        # Read and clean data
        df_raw = pd.read_excel(test_file)
        df_clean = validator.clean_dataframe(df_raw)
        df_typed = validator.validate_data_types(df_clean, type_mapping)
        
        # Create table and insert
        writer.create_table_from_dataframe(df_typed, type_mapping=type_mapping)
        rows_inserted = writer.bulk_insert_batch(df_typed)
        
        print("\n" + "="*40)
        print("üéâ SUCCESS!")
        print("="*40) 
        print(f"üìä Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {rows_inserted} ‡πÅ‡∏ñ‡∏ß")
        print(f"\nüîó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô SQL Server:")
        print(f"   ‚Üí SQL Server Management Studio")
        print(f"   ‚Üí Database: ExcelImportDB")
        print(f"   ‚Üí Table: quick_test")
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        os.remove(test_file)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_with_file(excel_file: str, table_name: str, sheet_name: str = None):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
    
    print(f"üöÄ Testing: {excel_file} ‚Üí {table_name}")
    print("=" * 50)
    
    if not test_connection():
        return False
    
    # Auto-detect type mapping
    type_mapping = {
        # Thai columns
        "‡∏ä‡∏∑‡πà‡∏≠": "string", "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•": "string", "‡∏≠‡∏≤‡∏¢‡∏∏": "integer",
        "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": "float", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": "datetime", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô": "datetime",
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": "integer", "‡∏£‡∏≤‡∏Ñ‡∏≤": "float", "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°": "float", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "string",
        
        # English columns  
        "name": "string", "email": "string", "age": "integer", 
        "salary": "float", "amount": "float", "price": "float",
        "total": "float", "date": "datetime", "created_at": "datetime",
        "is_active": "boolean", "active": "boolean"
    }
    
    try:
        from src.processors.excel_reader import ExcelReader
        from src.processors.data_validator import DataValidator
        from src.processors.database_writer import DatabaseWriter
        
        # Process
        reader = ExcelReader(excel_file, sheet_name)
        info = reader.get_sheet_info()
        validator = DataValidator()
        writer = DatabaseWriter(table_name)
        
        print(f"üìã ‡πÑ‡∏ü‡∏•‡πå: {info['total_rows']:,} ‡πÅ‡∏ñ‡∏ß, {len(info['columns'])} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        
        # Process in chunks
        total_inserted = 0
        for chunk in reader.read_chunks(chunk_size=1000):
            df_clean = validator.clean_dataframe(chunk)
            df_typed = validator.validate_data_types(df_clean, type_mapping)
            
            if total_inserted == 0:
                # Create table on first chunk
                writer.create_table_from_dataframe(df_typed, type_mapping=type_mapping)
            
            rows = writer.bulk_insert_batch(df_typed)
            total_inserted += rows
            print(f"    üìä Processed: {total_inserted:,}/{info['total_rows']:,} rows")
        
        print("\n" + "="*50)
        print("üéâ SUCCESS!")
        print("="*50)
        print(f"‚úÖ Import: {total_inserted:,} ‡πÅ‡∏ñ‡∏ß") 
        print(f"\nüîó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô SQL Server:")
        print(f"   ‚Üí SSMS ‚Üí ExcelImportDB ‚Üí Tables ‚Üí {table_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Main CLI"""
    
    if len(sys.argv) == 1:
        quick_test()
        
    elif len(sys.argv) == 2 and sys.argv[1] == "test":
        quick_test()
        
    elif len(sys.argv) == 2 and sys.argv[1] == "connect":
        test_connection()
        
    elif len(sys.argv) >= 3:
        excel_file = sys.argv[1]
        table_name = sys.argv[2]
        sheet_name = sys.argv[3] if len(sys.argv) > 3 else None
        
        if not os.path.exists(excel_file):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
            sys.exit(1)
            
        test_with_file(excel_file, table_name, sheet_name)
        
    else:
        print("""
üéØ Excel to SQL Server Test Runner

Usage:
  python test_sqlserver.py                           # Quick test
  python test_sqlserver.py test                      # Quick test
  python test_sqlserver.py connect                   # Test connection only
  python test_sqlserver.py <file.xlsx> <table_name>  # Custom test
  python test_sqlserver.py <file.xlsx> <table_name> <sheet_name>  # With sheet

Examples:
  python test_sqlserver.py                                    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß
  python test_sqlserver.py connect                            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  python test_sqlserver.py data/samples/sales_1000.xlsx sales # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
  python test_sqlserver.py data.xlsx employees Employees      # ‡∏£‡∏∞‡∏ö‡∏∏ sheet
        """)

if __name__ == "__main__":
    main()
