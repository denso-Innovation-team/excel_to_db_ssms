import os
import sys
import shutil
import subprocess
from pathlib import Path
import json
from typing import List, Dict, Any


class DENSO888Builder:
    """Build automation for DENSO888 application"""

    def __init__(self):
        self.project_root = Path(__file__).parent
        self.dist_dir = self.project_root / "dist"
        self.build_dir = self.project_root / "build"
        self.assets_dir = self.project_root / "assets"

        # Build configuration
        self.build_config = {
            "app_name": "DENSO888_ExcelToSQL",
            "main_script": "main.py",
            "icon_file": "assets/icons/denso_icon.ico",
            "hidden_imports": [
                "pandas",
                "sqlalchemy",
                "pyodbc",
                "openpyxl",
                "tqdm",
                "PIL",
                "tkinter",
                "tkinter.ttk",
                "tkinter.filedialog",
                "tkinter.messagebox",
                "tkinter.scrolledtext",
                "sqlite3",
                "dotenv",
            ],
            "data_files": [
                ("assets", "assets"),
                ("config", "config"),
                (".env.example", "."),
            ],
            "exclude_modules": ["matplotlib", "numpy.random._examples", "tcl", "tk"],
        }

    def check_requirements(self) -> bool:
        """Check build requirements"""
        print("ЁЯФН Checking build requirements...")

        required_packages = [
            "pyinstaller",
            "pandas",
            "sqlalchemy",
            "pyodbc",
            "openpyxl",
            "pillow",
            "python-dotenv",
            "tqdm",
        ]

        missing = []
        for package in required_packages:
            try:
                __import__(package.replace("-", "_"))
                print(f"  тЬЕ {package}")
            except ImportError:
                missing.append(package)
                print(f"  тЭМ {package} - р╣Др╕бр╣Ир╕Юр╕Ъ")

        if missing:
            print(f"\nтЪая╕П р╕Хр╣Йр╕нр╕Зр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З packages р╕Чр╕╡р╣Ир╕Вр╕▓р╕Фр╕лр╕▓р╕вр╣Др╕Ы:")
            print(f"pip install {' '.join(missing)}")
            return False

        print("тЬЕ Dependencies р╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ!\n")
        return True

    def prepare_build_environment(self) -> bool:
        """Prepare build environment"""
        print("ЁЯУБ р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Бр╕▓р╕г build...")

        try:
            # Create build directories
            self.dist_dir.mkdir(exist_ok=True)
            self.build_dir.mkdir(exist_ok=True)

            # Ensure assets exist
            self.assets_dir.mkdir(exist_ok=True)
            (self.assets_dir / "icons").mkdir(exist_ok=True)
            (self.assets_dir / "samples").mkdir(exist_ok=True)

            # Create icon if not exists
            self._create_default_icon()

            # Validate main script
            main_script = self.project_root / self.build_config["main_script"]
            if not main_script.exists():
                print(f"тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣Мр╕лр╕ер╕▒р╕Б: {main_script}")
                return False

            print("тЬЕ р╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Юр╕гр╣Йр╕нр╕б!\n")
            return True

        except Exception as e:
            print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕Хр╕гр╕╡р╕вр╕бр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б: {e}")
            return False

    def _create_default_icon(self):
        """Create default icon if not exists"""
        icon_path = self.assets_dir / "icons" / "denso_icon.ico"

        if icon_path.exists():
            return

        try:
            from PIL import Image, ImageDraw, ImageFont

            # Create 256x256 icon
            img = Image.new("RGB", (256, 256), "#DC0003")  # #DC0003 in RGB values
            draw = ImageDraw.Draw(img)

            # Draw text
            try:
                font = ImageFont.truetype("arial.ttf", 60)
            except:
                font = ImageFont.load_default()

            text = "D888"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]

            x = (256 - text_width) // 2
            y = (256 - text_height) // 2

            draw.text((x, y), text, fill="white", font=font)

            # Save as ICO with multiple sizes
            img.save(
                icon_path,
                format="ICO",
                sizes=[(256, 256), (128, 128), (64, 64), (32, 32), (16, 16)],
            )

            print(f"  ЁЯУЭ р╕кр╕гр╣Йр╕▓р╕З icon: {icon_path}")

        except Exception as e:
            print(f"  тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕З icon: {e}")

    def create_spec_file(self) -> Path:
        """Create PyInstaller spec file"""
        print("ЁЯУД р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М .spec...")

        spec_content = f"""# -*- mode: python ; coding: utf-8 -*-

import sys
from pathlib import Path

block_cipher = None

# Project paths
project_root = Path(__file__).parent

a = Analysis(
    ['{self.build_config["main_script"]}'],
    pathex=[str(project_root)],
    binaries=[],
    datas={self.build_config["data_files"]},
    hiddenimports={self.build_config["hidden_imports"]},
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes={self.build_config["exclude_modules"]},
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='{self.build_config["app_name"]}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # GUI Application
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='{self.build_config["icon_file"]}' if Path('{self.build_config["icon_file"]}').exists() else None
)
"""

        spec_file = self.project_root / f"{self.build_config['app_name']}.spec"

        with open(spec_file, "w", encoding="utf-8") as f:
            f.write(spec_content)

        print(f"  тЬЕ {spec_file.name}")
        return spec_file

    def build_executable(self, spec_file: Path) -> bool:
        """Build executable using PyInstaller"""
        print("ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕кр╕гр╣Йр╕▓р╕З .exe...")
        print("   (р╕нр╕▓р╕Ир╣Гр╕Кр╣Йр╣Ар╕зр╕ер╕▓р╕лр╕ер╕▓р╕вр╕Щр╕▓р╕Чр╕╡ р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И...)\n")

        try:
            cmd = [
                sys.executable,
                "-m",
                "PyInstaller",
                "--clean",
                "--noconfirm",
                str(spec_file),
            ]

            print(f"ЁЯФз р╕гр╕▒р╕Щр╕Др╕│р╕кр╕▒р╣Ир╕З: {' '.join(cmd)}")

            # Run PyInstaller
            result = subprocess.run(
                cmd,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                encoding="utf-8",
            )

            if result.returncode == 0:
                print("тЬЕ р╕кр╕гр╣Йр╕▓р╕З .exe р╕кр╕│р╣Ар╕гр╣Зр╕И!")

                # Check output file
                exe_path = self.dist_dir / f"{self.build_config['app_name']}.exe"
                if exe_path.exists():
                    size_mb = exe_path.stat().st_size / (1024 * 1024)
                    print(f"ЁЯУж р╣Др╕Яр╕ер╣М: {exe_path}")
                    print(f"ЁЯУК р╕Вр╕Щр╕▓р╕Ф: {size_mb:.1f} MB")
                    return True
                else:
                    print("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣М .exe р╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕З")
                    return False
            else:
                print("тЭМ р╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З .exe р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:")
                print(result.stderr)
                return False

        except Exception as e:
            print(f"тЭМ р╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З: {e}")
            return False

    def create_installer_package(self) -> bool:
        """Create installation package"""
        print("ЁЯУж р╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Юр╣Зр╕Др╣Ар╕Бр╕Ир╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З...")

        try:
            # Create installer batch script
            installer_content = f"""@echo off
chcp 65001 >nul
echo.
echo ==============================================
echo  DENSO888 - Excel to SQL Installation
echo  by р╣Ар╕ор╕╡р╕вр╕Хр╕нр╕бр╕Ир╕▒р╕Фр╕лр╕▒р╣Йр╕в!!!
echo ==============================================
echo.

REM р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Чр╕Шр╕┤р╣М Administrator
net session >nul 2>&1
if %errorLevel% == 0 (
    echo тЬЕ р╕гр╕▒р╕Щр╕Фр╣Йр╕зр╕вр╕кр╕┤р╕Чр╕Шр╕┤р╣М Administrator
) else (
    echo тЪая╕П р╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕лр╣Йр╕гр╕▒р╕Щр╕Фр╣Йр╕зр╕вр╕кр╕┤р╕Чр╕Шр╕┤р╣М Administrator
)

REM р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б
set "INSTALL_DIR=%USERPROFILE%\\DENSO888"
echo ЁЯУБ р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Др╕Ыр╕вр╕▒р╕З: %INSTALL_DIR%

if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"

REM р╕Др╕▒р╕Фр╕ер╕нр╕Бр╣Др╕Яр╕ер╣М
echo ЁЯУЛ р╕Др╕▒р╕Фр╕ер╕нр╕Бр╣Др╕Яр╕ер╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б...
copy "{self.build_config['app_name']}.exe" "%INSTALL_DIR%\\" >nul

REM р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕е
if not exist "%INSTALL_DIR%\\input_excels" mkdir "%INSTALL_DIR%\\input_excels"
if not exist "%INSTALL_DIR%\\logs" mkdir "%INSTALL_DIR%\\logs"
if not exist "%INSTALL_DIR%\\assets" mkdir "%INSTALL_DIR%\\assets"

REM р╕Др╕▒р╕Фр╕ер╕нр╕Бр╣Др╕Яр╕ер╣Мр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б
if exist "assets" xcopy "assets" "%INSTALL_DIR%\\assets\\" /E /I /Q >nul
if exist ".env.example" copy ".env.example" "%INSTALL_DIR%\\.env" >nul

REM р╕кр╕гр╣Йр╕▓р╕З shortcut р╕Ър╕Щ Desktop
echo ЁЯЦея╕П р╕кр╕гр╣Йр╕▓р╕З shortcut р╕Ър╕Щ Desktop...
set "SHORTCUT=%USERPROFILE%\\Desktop\\DENSO888.lnk"
powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%SHORTCUT%'); $Shortcut.TargetPath = '%INSTALL_DIR%\\{self.build_config['app_name']}.exe'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Description = 'DENSO888 - Excel to SQL'; $Shortcut.Save()" >nul 2>&1

REM р╕кр╕гр╣Йр╕▓р╕З Start Menu shortcut
echo ЁЯУ▒ р╕кр╕гр╣Йр╕▓р╕З shortcut р╣Гр╕Щ Start Menu...
set "STARTMENU=%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs"
if not exist "%STARTMENU%\\DENSO888" mkdir "%STARTMENU%\\DENSO888"
set "STARTSHORTCUT=%STARTMENU%\\DENSO888\\DENSO888.lnk"
powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%STARTSHORTCUT%'); $Shortcut.TargetPath = '%INSTALL_DIR%\\{self.build_config['app_name']}.exe'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Description = 'DENSO888 - Excel to SQL'; $Shortcut.Save()" >nul 2>&1

echo.
echo тЬЕ р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в!
echo ЁЯУБ р╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б: %INSTALL_DIR%
echo ЁЯЦея╕П Desktop Shortcut: %USERPROFILE%\\Desktop\\DENSO888.lnk
echo ЁЯУ▒ Start Menu: Programs\\DENSO888
echo.
echo ЁЯТб р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:
echo    тАв р╕Хр╣Йр╕нр╕Зр╕бр╕╡ ODBC Driver 17 for SQL Server р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н SQL Server
echo    тАв р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Бр╣Йр╣Др╕В .env р╣Гр╕Щр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕бр╣Др╕Фр╣Й
echo    тАв SQLite р╕Чр╕│р╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡р╣Вр╕Фр╕вр╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Ар╕Юр╕┤р╣Ир╕б
echo.
echo р╕Бр╕Фр╕Ыр╕╕р╣Ир╕бр╣Гр╕Фр╕Бр╣Зр╣Др╕Фр╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕┤р╕Ф...
pause > nul
"""

            installer_path = self.dist_dir / "INSTALL_DENSO888.bat"
            with open(installer_path, "w", encoding="utf-8") as f:
                f.write(installer_content)

            # Create uninstaller
            uninstaller_content = f"""@echo off
chcp 65001 >nul
echo.
echo ==============================================
echo  DENSO888 - Uninstaller
echo ==============================================
echo.

set "INSTALL_DIR=%USERPROFILE%\\DENSO888"
set "DESKTOP_SHORTCUT=%USERPROFILE%\\Desktop\\DENSO888.lnk"
set "STARTMENU_DIR=%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\DENSO888"

echo р╕Бр╕│р╕ер╕▒р╕Зр╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З DENSO888...
echo.

REM р╕ер╕Ъ shortcuts
if exist "%DESKTOP_SHORTCUT%" (
    del "%DESKTOP_SHORTCUT%" >nul 2>&1
    echo тЬЕ р╕ер╕Ъ Desktop shortcut
)

if exist "%STARTMENU_DIR%" (
    rmdir /s /q "%STARTMENU_DIR%" >nul 2>&1
    echo тЬЕ р╕ер╕Ъ Start Menu shortcuts
)

REM р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е
echo.
choice /c YN /m "р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░ logs р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕лр╕гр╕╖р╕нр╣Др╕бр╣И (Y/N)"
if errorlevel 2 goto keep_data

REM р╕ер╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
if exist "%INSTALL_DIR%" (
    rmdir /s /q "%INSTALL_DIR%" >nul 2>&1
    echo тЬЕ р╕ер╕Ър╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕бр╣Бр╕ер╕░р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
)
goto done

:keep_data
REM р╕ер╕Ър╣Ар╕Йр╕Юр╕▓р╕░р╣Др╕Яр╕ер╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б
if exist "%INSTALL_DIR%\\{self.build_config['app_name']}.exe" (
    del "%INSTALL_DIR%\\{self.build_config['app_name']}.exe" >nul 2>&1
    echo тЬЕ р╕ер╕Ър╣Др╕Яр╕ер╣Мр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б (р╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕зр╣Й)
)

:done
echo.
echo тЬЕ р╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в!
echo.
echo р╕Бр╕Фр╕Ыр╕╕р╣Ир╕бр╣Гр╕Фр╕Бр╣Зр╣Др╕Фр╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕┤р╕Ф...
pause > nul
"""

            uninstaller_path = self.dist_dir / "UNINSTALL_DENSO888.bat"
            with open(uninstaller_path, "w", encoding="utf-8") as f:
                f.write(uninstaller_content)

            # Create README for distribution
            readme_content = f"""# DENSO888 - Excel to SQL
**Created by р╣Ар╕ор╕╡р╕вр╕Хр╕нр╕бр╕Ир╕▒р╕Фр╕лр╕▒р╣Йр╕в!!!**

## ЁЯУж Package Contents
- `{self.build_config['app_name']}.exe` - Main application
- `INSTALL_DENSO888.bat` - Installation script
- `UNINSTALL_DENSO888.bat` - Uninstaller script
- `assets/` - Application assets
- `.env.example` - Configuration template

## ЁЯЪА Installation
1. Right-click `INSTALL_DENSO888.bat`
2. Select "Run as administrator" (recommended)
3. Follow installation prompts

## тЬи Features
- тЬЕ Mock data generation (100 - 50,000 rows)
- тЬЕ Excel file import (.xlsx, .xls)
- тЬЕ SQL Server + SQLite support
- тЬЕ Real-time progress tracking
- тЬЕ Modern GUI interface

## ЁЯФз Requirements
- Windows 10/11
- ODBC Driver 17 for SQL Server (for SQL Server connections)
- No additional software required for SQLite

## ЁЯУЮ Support
For issues or questions, check the logs in:
`%USERPROFILE%\\DENSO888\\logs\\denso888.log`
"""

            readme_path = self.dist_dir / "README.txt"
            with open(readme_path, "w", encoding="utf-8") as f:
                f.write(readme_content)

            print("  тЬЕ INSTALL_DENSO888.bat")
            print("  тЬЕ UNINSTALL_DENSO888.bat")
            print("  тЬЕ README.txt")
            print("тЬЕ р╣Бр╕Юр╣Зр╕Др╣Ар╕Бр╕Ир╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в!\n")
            return True

        except Exception as e:
            print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Юр╣Зр╕Др╣Ар╕Бр╕И: {e}")
            return False

    def cleanup_build(self):
        """Clean up build artifacts"""
        print("ЁЯз╣ р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф...")

        cleanup_items = [
            self.build_dir,
            self.project_root / f"{self.build_config['app_name']}.spec",
            self.project_root / "__pycache__",
        ]

        for item in cleanup_items:
            try:
                if item.is_dir():
                    shutil.rmtree(item)
                    print(f"  ЁЯЧСя╕П р╕ер╕Ъ {item.name}/")
                elif item.is_file():
                    item.unlink()
                    print(f"  ЁЯЧСя╕П р╕ер╕Ъ {item.name}")
            except Exception as e:
                print(f"  тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╕Ъ {item}: {e}")

        print("тЬЕ р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в!\n")

    def create_build_info(self) -> Dict[str, Any]:
        """Create build information"""
        import datetime

        exe_path = self.dist_dir / f"{self.build_config['app_name']}.exe"

        build_info = {
            "app_name": self.build_config["app_name"],
            "build_date": datetime.datetime.now().isoformat(),
            "python_version": sys.version,
            "platform": sys.platform,
            "exe_size_mb": (
                round(exe_path.stat().st_size / (1024 * 1024), 2)
                if exe_path.exists()
                else 0
            ),
            "build_config": self.build_config,
        }

        info_path = self.dist_dir / "build_info.json"
        with open(info_path, "w", encoding="utf-8") as f:
            json.dump(build_info, f, indent=2, ensure_ascii=False)

        return build_info

    def build(self) -> bool:
        """Main build process"""
        print("=" * 60)
        print("ЁЯПн DENSO888 - Excel to SQL Build System")
        print("   by р╣Ар╕ор╕╡р╕вр╕Хр╕нр╕бр╕Ир╕▒р╕Фр╕лр╕▒р╣Йр╕в!!!")
        print("=" * 60)
        print()

        steps = [
            ("р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Requirements", self.check_requirements),
            ("р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б", self.prepare_build_environment),
            ("р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М .spec", lambda: self.create_spec_file()),
        ]

        spec_file = None

        # Execute preparation steps
        for step_name, step_func in steps[:2]:
            print(f"ЁЯФД {step_name}...")
            if not step_func():
                print(f"тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕зр╣Гр╕Щр╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щ: {step_name}")
                return False

        # Create spec file
        print(f"ЁЯФД р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М .spec...")
        spec_file = self.create_spec_file()

        # Build executable
        print(f"ЁЯФД р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М .exe...")
        if not self.build_executable(spec_file):
            print("тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕зр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З executable")
            return False

        # Create installer package
        print(f"ЁЯФД р╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Юр╣Зр╕Др╣Ар╕Бр╕Ир╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З...")
        if not self.create_installer_package():
            print("тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕зр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Юр╣Зр╕Др╣Ар╕Бр╕Ир╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З")
            return False

        # Create build info
        build_info = self.create_build_info()

        # Cleanup
        self.cleanup_build()

        # Success summary
        print("=" * 60)
        print("ЁЯОЙ Build р╕кр╕│р╣Ар╕гр╣Зр╕И!")
        print("=" * 60)
        print("ЁЯУж р╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╣Др╕Фр╣Й:")
        print(f"   тАв {self.build_config['app_name']}.exe - р╣Бр╕нр╕Ыр╕Юр╕ер╕┤р╣Ар╕Др╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Б")
        print("   тАв INSTALL_DENSO888.bat - р╣Др╕Яр╕ер╣Мр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З")
        print("   тАв UNINSTALL_DENSO888.bat - р╣Др╕Яр╕ер╣Мр╕Цр╕нр╕Щр╕Бр╕▓р╕гр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З")
        print("   тАв README.txt - р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        print("   тАв build_info.json - р╕Вр╣Йр╕нр╕бр╕╣р╕е build")
        print()
        print("ЁЯЪА р╕зр╕┤р╕Шр╕╡р╣Гр╕Кр╣Й:")
        print("   1. р╕Др╕▒р╕Фр╕ер╕нр╕Бр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М dist/ р╣Др╕Ыр╕вр╕▒р╕Зр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╣Ар╕Ыр╣Йр╕▓р╕лр╕бр╕▓р╕в")
        print("   2. р╕гр╕▒р╕Щ INSTALL_DENSO888.bat р╣Ар╕Юр╕╖р╣Ир╕нр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З")
        print("   3. р╕лр╕гр╕╖р╕нр╕гр╕▒р╕Щ .exe р╣Вр╕Фр╕вр╕Хр╕гр╕З")
        print()
        print(f"ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕е Build:")
        print(f"   тАв р╕Вр╕Щр╕▓р╕Фр╣Др╕Яр╕ер╣М: {build_info['exe_size_mb']} MB")
        print(f"   тАв Python: {build_info['python_version'].split()[0]}")
        print(f"   тАв Platform: {build_info['platform']}")

        return True


def main():
    """Main build script"""
    builder = DENSO888Builder()

    try:
        success = builder.build()

        if not success:
            print("\nтЭМ Build р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з!")
            input("р╕Бр╕Фр╕Ыр╕╕р╣Ир╕б Enter р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕┤р╕Ф...")
            sys.exit(1)
        else:
            print("\nтЬЕ Build р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!")
            input("р╕Бр╕Фр╕Ыр╕╕р╣Ир╕б Enter р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕┤р╕Ф...")

    except KeyboardInterrupt:
        print("\nтЪая╕П Build р╕Цр╕╣р╕Бр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╣Вр╕Фр╕вр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й")
        sys.exit(1)
    except Exception as e:
        print(f"\nтЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╕гр╣Йр╕▓р╕вр╣Бр╕гр╕З: {e}")
        input("р╕Бр╕Фр╕Ыр╕╕р╣Ир╕б Enter р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕┤р╕Ф...")
        sys.exit(1)


if __name__ == "__main__":
    main()
