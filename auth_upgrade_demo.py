#!/usr/bin/env python3
"""
DENSO888 Authentication System Upgrade
‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö Auth ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á UX
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
import json
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any


class AuthConfigManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Authentication"""

    def __init__(self):
        self.config_file = Path("auth_config.json")
        self.default_config = {
            "authentication": {
                "enabled": True,
                "guest_mode": True,
                "auto_login": False,
                "remember_user": True,
                "session_timeout": 3600,
            },
            "database_access": {
                "guest_restrictions": {
                    "sqlite_only": True,
                    "max_rows": 10000,
                    "no_delete": True,
                    "read_only_mode": False,
                },
                "authenticated_access": {
                    "all_databases": True,
                    "unlimited_rows": True,
                    "full_permissions": True,
                },
            },
            "ui_settings": {
                "show_advanced_options": False,
                "default_database": "sqlite",
                "startup_mode": "guided",
            },
        }

    def load_config(self) -> Dict[str, Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ auth"""
        try:
            if self.config_file.exists():
                with open(self.config_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            return self.default_config.copy()
        except Exception:
            return self.default_config.copy()

    def save_config(self, config: Dict[str, Any]) -> bool:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        try:
            with open(self.config_file, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            return True
        except Exception:
            return False


class ModernLoginDialog:
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Login ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞ Modern"""

    def __init__(self, parent, auth_manager, config_manager):
        self.auth_manager = auth_manager
        self.config_manager = config_manager
        self.config = config_manager.load_config()
        self.success = False
        self.selected_mode = "authenticated"  # authenticated, guest, skip

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        self.dialog = tk.Toplevel(parent)
        self._setup_window()
        self._create_modern_ui()

    def _setup_window(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á"""
        self.dialog.title("DENSO888 - Choose Your Experience")
        self.dialog.geometry("600x500")
        self.dialog.resizable(False, False)
        self.dialog.grab_set()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (500 // 2)
        self.dialog.geometry(f"600x500+{x}+{y}")

        # Modern styling
        self.dialog.configure(bg="#f8f9fa")

        # Gradient effect simulation
        style = ttk.Style()
        style.theme_use("clam")

        # Custom styles
        style.configure(
            "Title.TLabel",
            font=("Segoe UI", 24, "bold"),
            foreground="#2c3e50",
            background="#f8f9fa",
        )

        style.configure(
            "Subtitle.TLabel",
            font=("Segoe UI", 11),
            foreground="#7f8c8d",
            background="#f8f9fa",
        )

        style.configure("Card.TFrame", relief="flat", borderwidth=1, background="white")

        style.configure("Primary.TButton", font=("Segoe UI", 10, "bold"))

    def _create_modern_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏ö‡∏ö Modern"""
        # Header Section
        self._create_header()

        # Mode Selection Cards
        self._create_mode_cards()

        # Login Form (initially hidden)
        self._create_login_form()

        # Footer with actions
        self._create_footer()

    def _create_header(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Header"""
        header_frame = tk.Frame(self.dialog, bg="#f8f9fa", height=120)
        header_frame.pack(fill="x", pady=(30, 20))
        header_frame.pack_propagate(False)

        # App Icon/Logo area
        icon_frame = tk.Frame(header_frame, bg="#f8f9fa")
        icon_frame.pack(pady=10)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Icon ‡πÅ‡∏ö‡∏ö ASCII Art
        icon_label = tk.Label(
            icon_frame, text="üè≠", font=("Segoe UI", 48), bg="#f8f9fa"
        )
        icon_label.pack()

        # Title
        title_label = ttk.Label(header_frame, text="DENSO888", style="Title.TLabel")
        title_label.pack()

        subtitle_label = ttk.Label(
            header_frame, text="Excel to SQL Management System", style="Subtitle.TLabel"
        )
        subtitle_label.pack(pady=(0, 10))

    def _create_mode_cards(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î"""
        cards_frame = tk.Frame(self.dialog, bg="#f8f9fa")
        cards_frame.pack(fill="both", expand=True, padx=40, pady=20)

        # Guest Mode Card
        self._create_mode_card(
            cards_frame,
            mode="guest",
            title="üéØ Quick Start (Guest)",
            description="Start immediately with SQLite\n‚Ä¢ No login required\n‚Ä¢ Local database only\n‚Ä¢ Limited to 10,000 rows",
            color="#2ecc71",
            row=0,
        )

        # Authenticated Mode Card
        self._create_mode_card(
            cards_frame,
            mode="authenticated",
            title="üîê Full Access (Login)",
            description="Complete features with authentication\n‚Ä¢ SQL Server + SQLite support\n‚Ä¢ Unlimited data processing\n‚Ä¢ Full admin capabilities",
            color="#3498db",
            row=1,
        )

        # Skip Mode Card (if enabled)
        if self.config.get("authentication", {}).get("guest_mode", True):
            self._create_mode_card(
                cards_frame,
                mode="skip",
                title="‚ö° Developer Mode",
                description="Skip authentication for testing\n‚Ä¢ Full access without login\n‚Ä¢ Development purposes only\n‚Ä¢ All features enabled",
                color="#e67e22",
                row=2,
            )

    def _create_mode_card(self, parent, mode, title, description, color, row):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏´‡∏°‡∏î"""
        # Card Frame
        card_frame = tk.Frame(parent, bg="white", relief="flat", bd=1)
        card_frame.pack(fill="x", pady=8)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° shadow effect
        shadow_frame = tk.Frame(parent, bg="#e0e0e0", height=2)
        shadow_frame.pack(fill="x")

        # Card Content
        content_frame = tk.Frame(card_frame, bg="white")
        content_frame.pack(fill="both", expand=True, padx=20, pady=15)

        # Radio button + Title
        header_frame = tk.Frame(content_frame, bg="white")
        header_frame.pack(fill="x")

        self.mode_var = getattr(self, "mode_var", tk.StringVar(value="guest"))

        radio = tk.Radiobutton(
            header_frame,
            text=title,
            variable=self.mode_var,
            value=mode,
            font=("Segoe UI", 12, "bold"),
            bg="white",
            fg=color,
            selectcolor="white",
            activebackground="white",
            command=lambda: self._on_mode_change(mode),
        )
        radio.pack(side="left")

        # Description
        desc_label = tk.Label(
            content_frame,
            text=description,
            font=("Segoe UI", 10),
            bg="white",
            fg="#5d6d7e",
            justify="left",
        )
        desc_label.pack(fill="x", pady=(5, 0))

        # Hover effects
        def on_enter(e):
            card_frame.configure(bg="#f1f2f6")
            content_frame.configure(bg="#f1f2f6")
            header_frame.configure(bg="#f1f2f6")
            desc_label.configure(bg="#f1f2f6")

        def on_leave(e):
            card_frame.configure(bg="white")
            content_frame.configure(bg="white")
            header_frame.configure(bg="white")
            desc_label.configure(bg="white")

        for widget in [card_frame, content_frame, header_frame, desc_label]:
            widget.bind("<Enter>", on_enter)
            widget.bind("<Leave>", on_leave)
            widget.bind("<Button-1>", lambda e, m=mode: self._select_mode(m))

    def _create_login_form(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° Login (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å)"""
        self.login_frame = tk.Frame(self.dialog, bg="#f8f9fa")

        # Login Card
        login_card = tk.Frame(self.login_frame, bg="white", relief="flat", bd=1)
        login_card.pack(padx=40, pady=20, fill="x")

        # Card content
        card_content = tk.Frame(login_card, bg="white")
        card_content.pack(fill="both", expand=True, padx=30, pady=20)

        # Form title
        form_title = tk.Label(
            card_content,
            text="üîë Authentication Required",
            font=("Segoe UI", 14, "bold"),
            bg="white",
            fg="#2c3e50",
        )
        form_title.pack(pady=(0, 15))

        # Username field
        tk.Label(
            card_content,
            text="Username:",
            font=("Segoe UI", 10),
            bg="white",
            fg="#5d6d7e",
        ).pack(anchor="w")

        self.username_entry = tk.Entry(
            card_content, font=("Segoe UI", 11), relief="flat", bd=5, bg="#f8f9fa"
        )
        self.username_entry.pack(fill="x", pady=(5, 10), ipady=8)
        self.username_entry.insert(0, "admin")  # Default value

        # Password field
        tk.Label(
            card_content,
            text="Password:",
            font=("Segoe UI", 10),
            bg="white",
            fg="#5d6d7e",
        ).pack(anchor="w")

        self.password_entry = tk.Entry(
            card_content,
            font=("Segoe UI", 11),
            relief="flat",
            bd=5,
            bg="#f8f9fa",
            show="*",
        )
        self.password_entry.pack(fill="x", pady=(5, 10), ipady=8)

        # Remember me checkbox
        self.remember_var = tk.BooleanVar(value=True)
        remember_check = tk.Checkbutton(
            card_content,
            text="Remember my login",
            variable=self.remember_var,
            font=("Segoe UI", 9),
            bg="white",
            fg="#7f8c8d",
        )
        remember_check.pack(anchor="w", pady=(0, 10))

        # Default credentials hint
        hint_label = tk.Label(
            card_content,
            text="üí° Default: admin / admin123",
            font=("Segoe UI", 9),
            bg="white",
            fg="#95a5a6",
        )
        hint_label.pack(pady=(0, 10))

        # Bind Enter key
        self.username_entry.bind("<Return>", lambda e: self.password_entry.focus())
        self.password_entry.bind("<Return>", lambda e: self._authenticate())

    def _create_footer(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Footer ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° Action"""
        footer_frame = tk.Frame(self.dialog, bg="#f8f9fa")
        footer_frame.pack(fill="x", side="bottom", padx=40, pady=30)

        # Back button (if in login mode)
        self.back_btn = tk.Button(
            footer_frame,
            text="‚Üê Back to Mode Selection",
            font=("Segoe UI", 10),
            bg="#ecf0f1",
            fg="#5d6d7e",
            relief="flat",
            bd=0,
            padx=20,
            pady=10,
            command=self._show_mode_selection,
        )

        # Main action button
        self.action_btn = tk.Button(
            footer_frame,
            text="üöÄ Start Application",
            font=("Segoe UI", 11, "bold"),
            bg="#2ecc71",
            fg="white",
            relief="flat",
            bd=0,
            padx=30,
            pady=12,
            command=self._handle_action,
        )
        self.action_btn.pack(side="right")

        # Cancel button
        cancel_btn = tk.Button(
            footer_frame,
            text="Cancel",
            font=("Segoe UI", 10),
            bg="#e74c3c",
            fg="white",
            relief="flat",
            bd=0,
            padx=20,
            pady=10,
            command=self.dialog.destroy,
        )
        cancel_btn.pack(side="right", padx=(0, 10))

        # Hover effects for buttons
        self._add_button_hover_effects()

    def _add_button_hover_effects(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° Hover Effects ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°"""

        def create_hover_effect(button, normal_color, hover_color):
            def on_enter(e):
                button.configure(bg=hover_color)

            def on_leave(e):
                button.configure(bg=normal_color)

            button.bind("<Enter>", on_enter)
            button.bind("<Leave>", on_leave)

        create_hover_effect(self.action_btn, "#2ecc71", "#27ae60")

    def _on_mode_change(self, mode):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î"""
        self.selected_mode = mode

        if mode == "authenticated":
            self.action_btn.configure(text="üîë Login to Continue", bg="#3498db")
        elif mode == "guest":
            self.action_btn.configure(text="üéØ Start as Guest", bg="#2ecc71")
        elif mode == "skip":
            self.action_btn.configure(text="‚ö° Skip & Start", bg="#e67e22")

    def _select_mode(self, mode):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î"""
        self.mode_var.set(mode)
        self._on_mode_change(mode)

    def _handle_action(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Action ‡∏´‡∏•‡∏±‡∏Å"""
        if self.selected_mode == "authenticated":
            self._show_login_form()
        elif self.selected_mode == "guest":
            self._start_guest_mode()
        elif self.selected_mode == "skip":
            self._start_skip_mode()

    def _show_login_form(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° Login"""
        # ‡∏ã‡πà‡∏≠‡∏ô mode selection
        for widget in self.dialog.winfo_children():
            if widget != self.login_frame:
                widget.pack_forget()

        # ‡πÅ‡∏™‡∏î‡∏á login form
        self.login_frame.pack(fill="both", expand=True)
        self.back_btn.pack(side="left")
        self.action_btn.configure(text="üîë Login", command=self._authenticate)

        # Focus ‡∏ó‡∏µ‡πà password field
        self.password_entry.focus()

    def _show_mode_selection(self):
        """‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î"""
        self.login_frame.pack_forget()
        self.back_btn.pack_forget()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà
        for widget in self.dialog.winfo_children():
            widget.destroy()

        self._create_modern_ui()

    def _authenticate(self):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Login"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get()

        if not username or not password:
            messagebox.showwarning(
                "Input Required", "Please enter both username and password"
            )
            return

        # Loading effect
        original_text = self.action_btn.cget("text")
        self.action_btn.configure(text="üîÑ Authenticating...", state="disabled")
        self.dialog.update()

        def auth_thread():
            success, message = self.auth_manager.authenticate(username, password)

            def finish_auth():
                if success:
                    self.success = True
                    self.selected_mode = "authenticated"
                    self.dialog.destroy()
                else:
                    self.action_btn.configure(text=original_text, state="normal")
                    messagebox.showerror("Login Failed", message)
                    self.password_entry.delete(0, tk.END)
                    self.password_entry.focus()

            self.dialog.after(0, finish_auth)

        threading.Thread(target=auth_thread, daemon=True).start()

    def _start_guest_mode(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î Guest"""
        self.success = True
        self.selected_mode = "guest"

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á guest user
        self.auth_manager.current_user = {"username": "guest", "role": "guest"}

        messagebox.showinfo(
            "Guest Mode",
            "Starting in Guest Mode\n\n"
            + "‚Ä¢ SQLite database only\n"
            + "‚Ä¢ Limited to 10,000 rows\n"
            + "‚Ä¢ No administrative features",
        )

        self.dialog.destroy()

    def _start_skip_mode(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î Skip (Developer)"""
        result = messagebox.askyesno(
            "Developer Mode",
            "Enable Developer Mode?\n\n"
            + "This will skip authentication and grant full access.\n"
            + "Recommended for development only.\n\n"
            + "Continue?",
        )

        if result:
            self.success = True
            self.selected_mode = "skip"

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á developer user
            self.auth_manager.current_user = {"username": "developer", "role": "admin"}

            self.dialog.destroy()


class FlexibleAuthManager:
    """‡∏£‡∏∞‡∏ö‡∏ö Auth ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏´‡∏°‡∏î"""

    def __init__(self):
        self.config_manager = AuthConfigManager()
        self.current_user = None
        self.current_mode = None

    def show_auth_dialog(self, parent) -> tuple[bool, str]:
        """‡πÅ‡∏™‡∏î‡∏á Dialog ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î"""
        dialog = ModernLoginDialog(parent, self, self.config_manager)
        parent.wait_window(dialog.dialog)

        if dialog.success:
            self.current_mode = dialog.selected_mode
            return True, dialog.selected_mode
        else:
            return False, "cancelled"

    def authenticate(self, username: str, password: str) -> tuple[bool, str]:
        """Authentication logic (simplified for demo)"""
        # Default admin credentials
        if username == "admin" and password == "admin123":
            self.current_user = {"username": username, "role": "admin"}
            return True, "Login successful"
        else:
            return False, "Invalid credentials"

    def check_permission(self, db_type: str, action: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î"""
        if not self.current_user:
            return False

        if self.current_mode == "skip" or self.current_user["role"] == "admin":
            return True

        if self.current_mode == "guest":
            # Guest restrictions
            if db_type == "sqlserver":
                return False  # SQLite only
            if action in ["delete", "admin"]:
                return False  # Limited permissions
            return True

        return True

    def get_database_restrictions(self) -> Dict[str, Any]:
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î"""
        if self.current_mode == "guest":
            return {
                "max_rows": 10000,
                "allowed_databases": ["sqlite"],
                "readonly_tables": [],
                "restricted_operations": ["delete", "drop"],
            }

        return {
            "max_rows": None,  # Unlimited
            "allowed_databases": ["sqlite", "sqlserver"],
            "readonly_tables": [],
            "restricted_operations": [],
        }


def demo_auth_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Auth ‡πÉ‡∏´‡∏°‡πà"""
    root = tk.Tk()
    root.withdraw()  # ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å

    auth_manager = FlexibleAuthManager()
    success, mode = auth_manager.show_auth_dialog(root)

    if success:
        print(f"‚úÖ Authentication successful!")
        print(f"Mode: {mode}")
        print(f"User: {auth_manager.current_user}")
        print(f"Database restrictions: {auth_manager.get_database_restrictions()}")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (demo)
        root.deiconify()
        root.title(f"DENSO888 - {mode.title()} Mode")
        root.geometry("800x600")

        info_label = tk.Label(
            root,
            text=f"üéâ Welcome to DENSO888!\n\n"
            + f"Mode: {mode}\n"
            + f"User: {auth_manager.current_user['username']}\n"
            + f"Role: {auth_manager.current_user['role']}",
            font=("Segoe UI", 14),
            justify="center",
        )
        info_label.pack(expand=True)

        root.mainloop()
    else:
        print("‚ùå Authentication cancelled")


if __name__ == "__main__":
    demo_auth_system()
