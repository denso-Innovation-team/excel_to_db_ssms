#!/usr/bin/env python3
"""
Excel to SSMS - Auto Installation Script
‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
"""

import subprocess
import sys
import platform
import os
from pathlib import Path


def check_python_version():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version"""
    version = sys.version_info
    print(f"üêç Python version: {version.major}.{version.minor}.{version.micro}")

    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Python 3.8 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
        return False

    print("‚úÖ Python version ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
    return True


def install_core_packages():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß"""

    # Core packages ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    packages = [
        "pandas>=2.0.0",
        "sqlalchemy>=2.0.0",
        "openpyxl>=3.1.0",
        "python-dotenv>=1.0.0",
        "tqdm>=4.65.0",
        "pyodbc>=4.0.39",  # ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        "numpy>=1.24.0",
        "xlrd>=2.0.1",
        "psutil>=5.9.0",
    ]

    installed = []
    failed = []

    for package in packages:
        package_name = package.split(">=")[0]
        print(f"\nüì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {package_name}...")

        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "install", package],
                check=True,
                capture_output=True,
                text=True,
            )

            print(f"  ‚úÖ {package_name} ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            installed.append(package_name)

        except subprocess.CalledProcessError as e:
            print(f"  ‚ùå {package_name} ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            print(f"     Error: {e.stderr}")
            failed.append(package_name)

    return installed, failed


def handle_pyodbc_issues():
    """‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ pyodbc ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"""
    print("\nüîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ pyodbc...")

    system = platform.system().lower()

    if system == "windows":
        print("  üí° Windows: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ODBC Driver 17 for SQL Server")
        print(
            "     Download: https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server"
        )

    elif system == "linux":
        print("  üí° Linux: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ODBC Driver")
        print("     Ubuntu/Debian: apt-get install unixodbc-dev")
        print("     CentOS/RHEL: yum install unixODBC-devel")

    elif system == "darwin":  # macOS
        print("  üí° macOS: ‡πÉ‡∏ä‡πâ brew ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
        print("     brew install unixodbc")

    # ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pyodbc ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
    methods = [
        [sys.executable, "-m", "pip", "install", "pyodbc"],
        [sys.executable, "-m", "pip", "install", "pyodbc", "--no-cache-dir"],
        [sys.executable, "-m", "pip", "install", "pyodbc", "--force-reinstall"],
    ]

    for i, method in enumerate(methods, 1):
        try:
            print(f"  üîÑ ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà {i}...")
            subprocess.run(method, check=True, capture_output=True)
            print(f"  ‚úÖ pyodbc ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà {i}")
            return True
        except subprocess.CalledProcessError:
            continue

    print("  ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pyodbc ‡πÑ‡∏î‡πâ")
    return False


def test_imports():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö import packages"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö imports...")

    test_packages = [
        ("pandas", "pandas"),
        ("sqlalchemy", "sqlalchemy"),
        ("openpyxl", "openpyxl"),
        ("dotenv", "python-dotenv"),
        ("tqdm", "tqdm"),
        ("pyodbc", "pyodbc"),
        ("numpy", "numpy"),
    ]

    success = 0
    total = len(test_packages)

    for import_name, package_name in test_packages:
        try:
            __import__(import_name)
            print(f"  ‚úÖ {package_name}")
            success += 1
        except ImportError:
            print(f"  ‚ùå {package_name}")

    print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {success}/{total} packages")
    return success == total


def create_minimal_requirements():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á requirements.txt ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"""
    minimal_requirements = """# Excel to SSMS - Minimal Requirements
# ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á

pandas>=2.0.0
sqlalchemy>=2.0.0
openpyxl>=3.1.0
python-dotenv>=1.0.0
tqdm>=4.65.0

# Optional (‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏¢‡∏Å‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
# pyodbc>=4.0.39
# numpy>=1.24.0
# psutil>=5.9.0
"""

    with open("requirements_minimal.txt", "w", encoding="utf-8") as f:
        f.write(minimal_requirements)

    print("  üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á requirements_minimal.txt")


def setup_directories():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    print("\nüìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå...")

    directories = ["logs", "data/samples", "src/config", "src/processors", "src/utils"]

    for dir_path in directories:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ {dir_path}")


def create_env_template():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env template"""
    if not os.path.exists(".env"):
        env_template = """# Excel to SSMS Configuration
# ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

# SQL Server Configuration
DB_HOST=10.73.148.27
DB_NAME=excel_to_db
DB_USER=TS00029
DB_PASSWORD=Thammaphon@TS00029
DB_TYPE=mssql
DB_DRIVER=ODBC Driver 17 for SQL Server

# Connection Pool Settings
POOL_SIZE=10
MAX_OVERFLOW=20
POOL_TIMEOUT=30
POOL_RECYCLE=3600

# Processing Configuration
BATCH_SIZE=2000
MAX_WORKERS=6
CHUNK_SIZE=10000

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/excel_to_ssms.log
LOG_MAX_SIZE=10485760
LOG_BACKUP_COUNT=5
"""

        with open(".env", "w", encoding="utf-8") as f:
            f.write(env_template)

        print("  üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á .env template")
    else:
        print("  ‚è≠Ô∏è .env ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")


def main():
    """Main installation function"""

    print("üöÄ Excel to SSMS - Auto Installation")
    print("=" * 50)

    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
    if not check_python_version():
        sys.exit(1)

    # 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip
    print("\nüì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip...")
    try:
        subprocess.run(
            [sys.executable, "-m", "pip", "install", "--upgrade", "pip"],
            check=True,
            capture_output=True,
        )
        print("  ‚úÖ pip ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except subprocess.CalledProcessError:
        print("  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip ‡πÑ‡∏î‡πâ")

    # 3. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages
    installed, failed = install_core_packages()

    # 4. ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ pyodbc ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if "pyodbc" in failed:
        handle_pyodbc_issues()

    # 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö imports
    import_success = test_imports()

    # 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    setup_directories()
    create_env_template()
    create_minimal_requirements()

    # 7. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "=" * 50)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
    print("=" * 50)

    print(f"‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(installed)} packages")
    if installed:
        print(f"   {', '.join(installed)}")

    if failed:
        print(f"‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {len(failed)} packages")
        print(f"   {', '.join(failed)}")

    if import_success:
        print("\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print("\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
        print("  1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç .env file")
        print("  2. python test_connection.py")
        print("  3. python sample_generator.py test")
        print("  4. python excel_to_ssms.py data/samples/test_100.xlsx test_table")
    else:
        print("\n‚ö†Ô∏è ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á packages")
        print("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ:")
        print("  pip install -r requirements_minimal.txt")
        print("  ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß")

    if "pyodbc" in failed:
        print(f"\nüîß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pyodbc:")
        print("  - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ODBC Driver 17 for SQL Server")
        print("  - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö compiler (Windows: Visual Studio Build Tools)")
        print("  - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ conda: conda install pyodbc")


if __name__ == "__main__":
    main()
