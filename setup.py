#!/usr/bin/env python3
"""
Excel to SSMS - Complete System Setup
‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
"""

import subprocess
import sys
import os
import platform
from pathlib import Path


def run_command(cmd, description=""):
    """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° error handling"""
    try:
        result = subprocess.run(
            cmd, shell=True, capture_output=True, text=True, check=True
        )
        print(f"‚úÖ {description}")
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description}: {e.stderr}")
        return False, e.stderr


def install_fixed_requirements():
    """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""

    print("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python packages...")

    # Core packages (‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
    core_packages = [
        "pandas>=2.0.0",
        "sqlalchemy>=2.0.0",
        "openpyxl>=3.1.0",
        "python-dotenv>=1.0.0",
        "tqdm>=4.65.0",
    ]

    # Optional packages (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö)
    optional_packages = [
        "pyodbc>=4.0.39",
        "numpy>=1.24.0",
        "xlrd>=2.0.1",
        "psutil>=5.9.0",
    ]

    installed = []
    failed = []

    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á core packages ‡∏Å‡πà‡∏≠‡∏ô
    for package in core_packages:
        name = package.split(">=")[0]
        success, output = run_command(
            f"{sys.executable} -m pip install {package}", f"Installing {name}"
        )
        if success:
            installed.append(name)
        else:
            failed.append(name)

    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á optional packages
    for package in optional_packages:
        name = package.split(">=")[0]
        success, output = run_command(
            f"{sys.executable} -m pip install {package}",
            f"Installing {name} (optional)",
        )
        if success:
            installed.append(name)
        else:
            print(f"‚ö†Ô∏è {name} ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)")

    return installed, failed


def create_project_structure():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""

    print("\nüìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ...")

    directories = ["src/config", "src/processors", "src/utils", "logs", "data/samples"]

    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á __init__.py files
        if directory.startswith("src"):
            init_file = Path(directory) / "__init__.py"
            init_file.touch()

    print("‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏û‡∏£‡πâ‡∏≠‡∏°")


def create_configuration_files():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå configuration"""

    print("\n‚öôÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå configuration...")

    # .env file
    if not Path(".env").exists():
        env_content = """# Excel to SSMS Configuration
DB_HOST=10.73.148.27
DB_NAME=excel_to_db
DB_USER=TS00029
DB_PASSWORD=Thammaphon@TS00029
DB_TYPE=mssql
DB_DRIVER=ODBC Driver 17 for SQL Server

# Connection Pool
POOL_SIZE=10
MAX_OVERFLOW=20
POOL_TIMEOUT=30
POOL_RECYCLE=3600

# Processing
BATCH_SIZE=2000
MAX_WORKERS=6
CHUNK_SIZE=10000

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/excel_to_ssms.log
"""

        with open(".env", "w", encoding="utf-8") as f:
            f.write(env_content)
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á .env file")

    # requirements_working.txt (‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
    requirements_content = """# Excel to SSMS - Working Requirements
pandas>=2.0.0
sqlalchemy>=2.0.0
openpyxl>=3.1.0
python-dotenv>=1.0.0
tqdm>=4.65.0

# Optional - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏¢‡∏Å‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
# pyodbc>=4.0.39
# numpy>=1.24.0
# psutil>=5.9.0
"""

    with open("requirements_working.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á requirements_working.txt")


def test_basic_functionality():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""

    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö...")

    # Test imports
    test_packages = ["pandas", "sqlalchemy", "openpyxl", "dotenv", "tqdm"]
    working_packages = []

    for package in test_packages:
        try:
            __import__(package)
            working_packages.append(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")

    # Test optional packages
    optional_packages = ["pyodbc", "numpy", "psutil"]
    for package in optional_packages:
        try:
            __import__(package)
            working_packages.append(package)
            print(f"‚úÖ {package} (optional)")
        except ImportError:
            print(f"‚ö†Ô∏è {package} (optional - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÑ‡∏î‡πâ)")

    return len(working_packages) >= 5  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 packages ‡∏´‡∏•‡∏±‡∏Å


def create_quick_test():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß"""

    print("\nüöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")

    test_content = '''#!/usr/bin/env python3
"""
Quick Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
"""

def test_imports():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö imports"""
    try:
        import pandas as pd
        import sqlalchemy
        import openpyxl
        from dotenv import load_dotenv
        from tqdm import tqdm
        print("‚úÖ Core packages ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        return True
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_excel_basic():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô Excel"""
    try:
        import pandas as pd
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        data = {
            "Name": ["John", "Jane", "Bob"],
            "Age": [25, 30, 35],
            "Salary": [50000, 75000, 85000]
        }
        
        df = pd.DataFrame(data)
        test_file = "quick_test.xlsx"
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
        df.to_excel(test_file, index=False)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
        df_read = pd.read_excel(test_file)
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
        import os
        os.remove(test_file)
        
        print("‚úÖ Excel processing ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        return True
        
    except Exception as e:
        print(f"‚ùå Excel test error: {e}")
        return False

def main():
    print("üéØ Excel to SSMS - Quick Test")
    print("=" * 40)
    
    # Test imports
    import_ok = test_imports()
    
    # Test Excel
    excel_ok = test_excel_basic()
    
    if import_ok and excel_ok:
        print("\\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print("\\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:")
        print("  1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç .env file (database connection)")
        print("  2. python test_connection.py (‡∏ó‡∏î‡∏™‡∏≠‡∏ö SQL Server)")
        print("  3. python sample_generator.py test (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
        print("  4. python excel_to_ssms.py data/samples/test_100.xlsx test_table")
    else:
        print("\\n‚ùå ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        print("üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô: pip install -r requirements_working.txt")

if __name__ == "__main__":
    main()
'''

    with open("quick_test.py", "w", encoding="utf-8") as f:
        f.write(test_content)
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á quick_test.py")


def show_final_instructions():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"""

    print("\n" + "=" * 60)
    print("üéä Excel to SSMS System Setup Complete!")
    print("=" * 60)

    print("\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö:")
    print("   python quick_test.py")

    print("\n2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç configuration:")
    print("   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç .env file (database connection info)")

    print("\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:")
    print("   python test_connection.py")

    print("\n4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("   python sample_generator.py test")

    print("\n5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö import:")
    print("   python excel_to_ssms.py data/samples/test_100.xlsx employees")

    print("\nüí° ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:")
    print("- ‡∏î‡∏π logs ‡πÉ‡∏ô logs/excel_to_ssms.log")
    print("- ‡∏£‡∏±‡∏ô python quick_test.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π error")
    print("- ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ODBC Driver 17 for SQL Server")

    print(f"\nüîó SQL Server Connection:")
    print(f"   Server: 10.73.148.27:1433")
    print(f"   Database: excel_to_db")
    print(f"   User: TS00029")


def main():
    """Main setup function"""

    print("üöÄ Excel to SSMS - Complete System Setup")
    print("=" * 60)
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...")

    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Python 3.8+")
        sys.exit(1)
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")

    # 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î pip
    run_command(f"{sys.executable} -m pip install --upgrade pip", "Upgrading pip")

    # 3. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages
    installed, failed = install_fixed_requirements()

    # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    create_project_structure()

    # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå configuration
    create_configuration_files()

    # 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    create_quick_test()

    # 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    system_working = test_basic_functionality()

    # 8. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:")
    print(f"‚úÖ Packages ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(installed)}")
    if failed:
        print(f"‚ùå Packages ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {len(failed)} ({', '.join(failed)})")

    if system_working:
        show_final_instructions()
    else:
        print("\n‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        print("üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô: python quick_test.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏±‡∏ç‡∏´‡∏≤")


if __name__ == "__main__":
    main()
